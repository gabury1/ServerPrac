# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name : Gradle permission
      run: chmod +x ./gradlew

    - name : Gradle Clean
      run : ./gradlew clean

    - name : set YAML FILE(test)
      run: |
          cd ./ # resources ������ �̵�
          touch ./env # env.properties ���� ����
          echo "CICD 테스트."
          echo 'DB_URL = ${{secrets.DB_URL}}' >> ./.env
          echo 'DB_USERNAME = ${{secrets.DB_USERNAME}}' >> ./.env
          echo 'DB_PASSWORD = ${{secrets.DB_PASSWORD}}' >> ./.env
          echo 'TEST_STRING = ${{secrets.TEST_STRING}}' >> ./.env
          cat ./.env

    - name: Build with Gradle Wrapper
      run: ./gradlew build test -i

    # docker build & push to develop
    - name: Docker build & push to dev
      if: contains(github.ref, 'main')
      run: | 
       docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
       docker build -t ${{ secrets.DOCKER_USERNAME }}/server-prac .
       docker push ${{ secrets.DOCKER_USERNAME }}/server-prac

    ## deploy to production
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy-prod
      if: contains(github.ref, 'main')
      with:
        host: ${{ secrets.HOST_PROD }} # EC2 퍼블릭 IPv4 DNS
        username: ubuntu
        key: ${{ secrets.PRIVATE_KEY }}
        envs: GITHUB_SHA
        script: |
          sudo docker ps
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/server-prac
          sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/server-prac
          sudo docker image prune -f
       
      

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
